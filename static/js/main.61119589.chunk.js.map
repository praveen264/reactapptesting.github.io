{"version":3,"sources":["menu.js","about.js","contact.js","home.js","App.js","serviceWorker.js","index.js"],"names":["Menu","className","href","About","Form","for","type","name","id","title","required","value","Contact","Home","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAgBeA,G,wBAbF,WACV,OAAO,yBAAKC,UAAU,OAClB,wDACA,yBAAKA,UAAU,WACnB,wBAAIA,UAAU,OACV,4BAAI,uBAAGC,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,UAAR,aACJ,4BAAI,uBAAGA,KAAK,YAAR,oBCDIC,G,MAPD,WACV,OAAO,yBAAKF,UAAU,SAElB,2DCIFG,G,MAAO,WACT,OAAO,8BACF,2BAAOH,UAAU,SACb,4BACA,4BAAI,2BAAOI,IAAI,QAAX,cACJ,4BAAI,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOC,MAAM,6BAA6BC,UAAQ,MAExF,4BACA,4BAAI,2BAAOL,IAAI,SAAX,UACJ,4BAAI,2BAAOC,KAAK,QAAQC,KAAK,QAAQC,GAAG,YAExC,4BACA,4BAAI,2BAAOH,IAAI,SAAX,cACJ,4BAAI,2BAAOC,KAAK,MAAMC,KAAK,QAAQC,GAAG,YAEtC,4BACA,4BAAI,2BAAOH,IAAI,WAAX,aACJ,4BAAI,8BAAUE,KAAK,cAEnB,4BAAI,4BAAI,2BAAOD,KAAK,SAASC,KAAK,SAASI,MAAM,iBAK/CC,EA/BC,WAChB,OAAO,yBAAKX,UAAU,WACnB,2CACC,kBAAC,EAAD,QCIWY,G,MAPF,WACT,OAAO,yBAAKZ,UAAU,QAClB,uD,eCyBOa,MApBf,WACE,OACE,kBAAC,IAAD,KACA,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWb,IAChC,kBAAC,IAAD,CAAOY,KAAK,IAAIE,OAAK,EAACD,UAAWH,IAEjC,kBAAC,IAAD,CAAOE,KAAK,WAAWC,UAAWJ,KAElC,gCACE,uDCTYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.61119589.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './menu.css';\r\nimport 'tachyons';\r\nconst Menu = () => {\r\n   return <div className=\"pa4\">\r\n       <h1>Welcome to React Routing</h1>\r\n       <div className=\"routing\">\r\n   <ul className=\"pa4\">\r\n       <li><a href=\"/\">Home</a></li>\r\n       <li><a href=\"/about\">About Us</a></li>\r\n       <li><a href=\"/contact\">Contact Us</a></li>\r\n   </ul>\r\n   </div>\r\n   </div> \r\n}\r\n\r\nexport default Menu;","import React,{Component} from 'react';\r\nimport './about.css';\r\nconst About = () => {\r\n    return <div className=\"about\">\r\n        \r\n        <h1>Welcome to About US page</h1>\r\n        </div>\r\n}\r\n\r\nexport default About;","import React,{Component} from 'react';\r\nimport './contact.css';\r\nconst Contact = () => {\r\nreturn <div className=\"contact\">\r\n   <h2> Contact Us</h2>\r\n    <Form ></Form>\r\n       </div>\r\n}\r\n\r\nconst Form = () => {\r\n    return <form>\r\n         <table className=\"label\">\r\n             <tr>\r\n             <td><label for=\"name\">Full Name</label></td>\r\n             <td><input type=\"text\" name=\"name\" id=\"name\" title=\"Please give your full name\" required/></td>\r\n             </tr>\r\n             <tr>\r\n             <td><label for=\"email\">Email</label></td>\r\n             <td><input type=\"email\" name=\"email\" id=\"email\"/></td>\r\n             </tr>\r\n             <tr>\r\n             <td><label for=\"phone\">Phone No:</label></td>\r\n             <td><input type=\"tel\" name=\"email\" id=\"phone\"/></td>\r\n             </tr>\r\n             <tr>\r\n             <td><label for=\"message\">Message:</label></td>\r\n             <td><textarea name=\"message\"></textarea></td>\r\n             </tr>\r\n             <tr><td><input type=\"submit\" name=\"submit\" value=\"SUBMIT\"></input></td></tr>\r\n             </table>\r\n        </form>\r\n       \r\n}\r\nexport default Contact;","import React,{Component} from 'react';\r\nimport './home.css';\r\nconst Home = () => {\r\n    return <div className=\"home\">\r\n        <h1>Welcome to home page</h1>\r\n        \r\n    </div>\r\n}\r\n\r\nexport default Home;","import React from 'react';\n\nimport './App.css';\nimport Menu from './menu';\nimport About from './about';\nimport Contact from './contact';\nimport Home from './home';\nimport './home.css';\nimport {BrowserRouter,Route,Switch } from 'react-router-dom';\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div> \n      <Menu></Menu>\n      <Switch>\n      <Route path=\"/about\" component={About}></Route>\n      <Route path=\"/\" exact component={Home}></Route>\n     \n      <Route path=\"/contact\" component={Contact}></Route>\n      </Switch>\n      <footer>\n        <p>Copywright by Mphase</p>\n      </footer>\n    </div>\n    </BrowserRouter>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Menu from './menu';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}